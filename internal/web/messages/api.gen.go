// Package messages provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package messages

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Message defines model for Message.
type Message struct {
	Id     *uint   `json:"id,omitempty"`
	IsDone *bool   `json:"is_done,omitempty"`
	Task   *string `json:"task,omitempty"`
	UserId *uint   `json:"user_id,omitempty"`
}

// PostMessagesJSONRequestBody defines body for PostMessages for application/json ContentType.
type PostMessagesJSONRequestBody = Message

// PatchMessageByIdJSONRequestBody defines body for PatchMessageById for application/json ContentType.
type PatchMessageByIdJSONRequestBody = Message

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new message
	// (POST /messages)
	PostMessages(ctx echo.Context) error
	// Delete message by id
	// (DELETE /messages/{id})
	DeleteMessageById(ctx echo.Context, id uint) error
	// Update message by id
	// (PATCH /messages/{id})
	PatchMessageById(ctx echo.Context, id uint) error
	// Get messages by user id
	// (GET /users/{user_id}/messages)
	GetMessagesByUserId(ctx echo.Context, userId uint) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostMessages converts echo context to params.
func (w *ServerInterfaceWrapper) PostMessages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMessages(ctx)
	return err
}

// DeleteMessageById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMessageById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMessageById(ctx, id)
	return err
}

// PatchMessageById converts echo context to params.
func (w *ServerInterfaceWrapper) PatchMessageById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchMessageById(ctx, id)
	return err
}

// GetMessagesByUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMessagesByUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMessagesByUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/messages", wrapper.PostMessages)
	router.DELETE(baseURL+"/messages/:id", wrapper.DeleteMessageById)
	router.PATCH(baseURL+"/messages/:id", wrapper.PatchMessageById)
	router.GET(baseURL+"/users/:user_id/messages", wrapper.GetMessagesByUserId)

}

type PostMessagesRequestObject struct {
	Body *PostMessagesJSONRequestBody
}

type PostMessagesResponseObject interface {
	VisitPostMessagesResponse(w http.ResponseWriter) error
}

type PostMessages201JSONResponse Message

func (response PostMessages201JSONResponse) VisitPostMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMessageByIdRequestObject struct {
	Id uint `json:"id"`
}

type DeleteMessageByIdResponseObject interface {
	VisitDeleteMessageByIdResponse(w http.ResponseWriter) error
}

type DeleteMessageById204Response struct {
}

func (response DeleteMessageById204Response) VisitDeleteMessageByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PatchMessageByIdRequestObject struct {
	Id   uint `json:"id"`
	Body *PatchMessageByIdJSONRequestBody
}

type PatchMessageByIdResponseObject interface {
	VisitPatchMessageByIdResponse(w http.ResponseWriter) error
}

type PatchMessageById200JSONResponse Message

func (response PatchMessageById200JSONResponse) VisitPatchMessageByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMessagesByUserIdRequestObject struct {
	UserId uint `json:"user_id"`
}

type GetMessagesByUserIdResponseObject interface {
	VisitGetMessagesByUserIdResponse(w http.ResponseWriter) error
}

type GetMessagesByUserId200JSONResponse []Message

func (response GetMessagesByUserId200JSONResponse) VisitGetMessagesByUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new message
	// (POST /messages)
	PostMessages(ctx context.Context, request PostMessagesRequestObject) (PostMessagesResponseObject, error)
	// Delete message by id
	// (DELETE /messages/{id})
	DeleteMessageById(ctx context.Context, request DeleteMessageByIdRequestObject) (DeleteMessageByIdResponseObject, error)
	// Update message by id
	// (PATCH /messages/{id})
	PatchMessageById(ctx context.Context, request PatchMessageByIdRequestObject) (PatchMessageByIdResponseObject, error)
	// Get messages by user id
	// (GET /users/{user_id}/messages)
	GetMessagesByUserId(ctx context.Context, request GetMessagesByUserIdRequestObject) (GetMessagesByUserIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostMessages operation middleware
func (sh *strictHandler) PostMessages(ctx echo.Context) error {
	var request PostMessagesRequestObject

	var body PostMessagesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostMessages(ctx.Request().Context(), request.(PostMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostMessagesResponseObject); ok {
		return validResponse.VisitPostMessagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMessageById operation middleware
func (sh *strictHandler) DeleteMessageById(ctx echo.Context, id uint) error {
	var request DeleteMessageByIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMessageById(ctx.Request().Context(), request.(DeleteMessageByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMessageById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMessageByIdResponseObject); ok {
		return validResponse.VisitDeleteMessageByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchMessageById operation middleware
func (sh *strictHandler) PatchMessageById(ctx echo.Context, id uint) error {
	var request PatchMessageByIdRequestObject

	request.Id = id

	var body PatchMessageByIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchMessageById(ctx.Request().Context(), request.(PatchMessageByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchMessageById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchMessageByIdResponseObject); ok {
		return validResponse.VisitPatchMessageByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMessagesByUserId operation middleware
func (sh *strictHandler) GetMessagesByUserId(ctx echo.Context, userId uint) error {
	var request GetMessagesByUserIdRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessagesByUserId(ctx.Request().Context(), request.(GetMessagesByUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessagesByUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMessagesByUserIdResponseObject); ok {
		return validResponse.VisitGetMessagesByUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
